using System.Diagnostics.CodeAnalysis;

namespace Quarer;

internal static class QrDataCapacityLookup
{
    //private static readonly int[][][] VersionModeErrorLevelCapacityLookup =
    //[
    //    // Version 1
    //    [
    //        [ 41, 25, 17, 10 ],  // Error Level L
    //        [ 34, 20, 14,  8 ],  // Error Level M
    //        [ 27, 16, 11,  7 ],  // Error Level Q
    //        [ 17, 10,  7,  4 ]   // Error Level H
    //    ],
    //    // Version 2
    //    [
    //        [ 77, 47, 32, 20 ],
    //        [ 63, 38, 26, 16 ],
    //        [ 48, 29, 20, 12 ],
    //        [ 34, 20, 14,  8 ]
    //    ],
    //    // Version 3
    //    [
    //        [ 127,  77,  53,  32 ],
    //        [ 101,  61,  42,  26 ],
    //        [  77,  47,  32,  20 ],
    //        [  58,  35,  24,  15 ]
    //    ],
    //    // Version 4
    //    [
    //        [ 187, 114,  78,  48 ],
    //        [ 149,  90,  62,  38 ],
    //        [ 111,  67,  46,  28 ],
    //        [  82,  50,  34,  21 ]
    //    ],
    //    // Version 5
    //    [
    //        [ 255, 154, 106,  65 ],
    //        [ 202, 122,  84,  52 ],
    //        [ 144,  87,  60,  37 ],
    //        [ 106,  64,  44,  27 ]
    //    ],
    //    // Version 6
    //    [
    //        [ 322, 195, 134,  82 ],
    //        [ 255, 154, 106,  65 ],
    //        [ 178, 108,  74,  45 ],
    //        [ 139,  84,  58,  36 ]
    //    ],
    //    // Version 7
    //    [
    //        [ 370, 224, 154,  95 ],
    //        [ 293, 178, 122,  75 ],
    //        [ 207, 125,  86,  53 ],
    //        [ 154,  93,  64,  39 ]
    //    ],
    //    // Version 8
    //    [
    //        [ 461, 279, 192, 118 ],
    //        [ 365, 221, 152,  93 ],
    //        [ 259, 157, 108,  66 ],
    //        [ 202, 122,  84,  52 ]
    //    ],
    //    // Version 9
    //    [
    //        [ 552, 335, 230, 141 ],
    //        [ 432, 262, 180, 111 ],
    //        [ 312, 189, 130,  80 ],
    //        [ 235, 143,  98,  60 ]
    //    ],
    //    // Version 10
    //    [
    //        [ 652, 395, 271, 167 ],
    //        [ 513, 311, 213, 131 ],
    //        [ 364, 221, 151,  93 ],
    //        [ 288, 174, 119,  74 ]
    //    ],
    //    // Version 11
    //    [
    //        [ 772, 468, 321, 198 ],
    //        [ 604, 366, 251, 155 ],
    //        [ 427, 259, 177, 109 ],
    //        [ 331, 200, 137,  85 ]
    //    ],
    //    // Version 12
    //    [
    //        [ 883, 535, 367, 226 ],
    //        [ 691, 419, 287, 177 ],
    //        [ 489, 296, 203, 125 ],
    //        [ 374, 227, 155,  96 ]
    //    ],
    //    // Version 13
    //    [
    //        [ 1022, 619, 425, 262 ],
    //        [  796, 483, 331, 204 ],
    //        [  580, 352, 241, 149 ],
    //        [  427, 259, 177, 109 ]
    //    ],
    //    // Version 14
    //    [
    //        [ 1101, 667, 458, 282 ],
    //        [  871, 528, 362, 223 ],
    //        [  621, 376, 258, 159 ],
    //        [  468, 283, 194, 120 ]
    //    ],
    //    // Version 15
    //    [
    //        [ 1250, 758, 520, 320 ],
    //        [  991, 600, 412, 254 ],
    //        [  703, 426, 292, 180 ],
    //        [  530, 321, 220, 136 ]
    //    ],
    //    // Version 16
    //    [
    //        [ 1408, 854, 586, 361 ],
    //        [ 1082, 656, 450, 277 ],
    //        [  775, 470, 322, 198 ],
    //        [  602, 365, 250, 154 ]
    //    ],
    //    // Version 17
    //    [
    //        [ 1548, 938, 644, 397 ],
    //        [ 1212, 734, 504, 310 ],
    //        [  876, 531, 364, 224 ],
    //        [  674, 408, 280, 173 ]
    //    ],
    //    // Version 18
    //    [
    //        [ 1725, 1046, 718, 442 ],
    //        [ 1346,  816, 560, 345 ],
    //        [  948,  574, 394, 243 ],
    //        [  746,  452, 310, 191 ]
    //    ],
    //    // Version 19
    //    [
    //        [ 1903, 1153, 792, 488 ],
    //        [ 1500,  909, 624, 384 ],
    //        [ 1063,  644, 442, 272 ],
    //        [  813,  493, 338, 208 ]
    //    ],
    //    // Version 20
    //    [
    //        [ 2061, 1249, 858, 528 ],
    //        [ 1600,  970, 666, 410 ],
    //        [ 1159,  702, 482, 297 ],
    //        [  919,  557, 382, 235 ]
    //    ],
    //    // Version 21
    //    [
    //        [ 2232, 1352,  929,  572 ],
    //        [ 1708, 1035,  711,  438 ],
    //        [ 1224,  742,  509,  314 ],
    //        [  969,  587,  403,  248 ]
    //    ],
    //    // Version 22
    //    [
    //        [ 2409, 1460, 1003,  618 ],
    //        [ 1872, 1134,  779,  480 ],
    //        [ 1358,  823,  565,  348 ],
    //        [ 1056,  640,  439,  270 ]
    //    ],
    //    // Version 23
    //    [
    //        [ 2620, 1588, 1091,  672 ],
    //        [ 2059, 1248,  857,  528 ],
    //        [ 1468,  890,  611,  376 ],
    //        [ 1108,  672,  461,  284 ]
    //    ],
    //    // Version 24
    //    [
    //        [ 2812, 1704, 1171,  721 ],
    //        [ 2188, 1326,  911,  561 ],
    //        [ 1588,  963,  661,  407 ],
    //        [ 1228,  744,  511,  315 ]
    //    ],
    //    // Version 25
    //    [
    //        [ 3057, 1853, 1273,  784 ],
    //        [ 2395, 1451,  997,  614 ],
    //        [ 1718, 1041,  715,  440 ],
    //        [ 1286,  779,  535,  330 ]
    //    ],
    //    // Version 26
    //    [
    //        [ 3283, 1990, 1367,  842 ],
    //        [ 2544, 1542, 1059,  652 ],
    //        [ 1804, 1094,  751,  462 ],
    //        [ 1425,  864,  593,  365 ]
    //    ],
    //    // Version 27
    //    [
    //        [ 3517, 2132, 1465,  902 ],
    //        [ 2701, 1637, 1125,  692 ],
    //        [ 1933, 1172,  805,  496 ],
    //        [ 1501,  910,  625,  385 ]
    //    ],
    //    // Version 28
    //    [
    //        [ 3669, 2223, 1528,  940 ],
    //        [ 2857, 1732, 1190,  732 ],
    //        [ 2085, 1263,  868,  534 ],
    //        [ 1581,  958,  658,  405 ]
    //    ],
    //    // Version 29
    //    [
    //        [ 3909, 2369, 1628, 1002 ],
    //        [ 3035, 1839, 1264,  778 ],
    //        [ 2181, 1322,  908,  559 ],
    //        [ 1677, 1016,  698,  430 ]
    //    ],
    //    // Version 30
    //    [
    //        [ 4158, 2520, 1732, 1066 ],
    //        [ 3289, 1994, 1370,  843 ],
    //        [ 2358, 1429,  982,  604 ],
    //        [ 1782, 1080,  742,  457 ]
    //    ],
    //    // Version 31
    //    [
    //        [ 4417, 2677, 1840, 1132 ],
    //        [ 3486, 2113, 1452,  894 ],
    //        [ 2473, 1499, 1030,  634 ],
    //        [ 1897, 1150,  790,  486 ]
    //    ],
    //    // Version 32
    //    [
    //        [ 4686, 2840, 1952, 1201 ],
    //        [ 3693, 2238, 1538,  947 ],
    //        [ 2670, 1618, 1112,  684 ],
    //        [ 2022, 1226,  842,  518 ]
    //    ],
    //    // Version 33
    //    [
    //        [ 4965, 3009, 2068, 1273 ],
    //        [ 3909, 2369, 1628, 1002 ],
    //        [ 2805, 1700, 1168,  719 ],
    //        [ 2157, 1307,  898,  553 ]
    //    ],
    //    // Version 34
    //    [
    //        [ 5253, 3183, 2188, 1347 ],
    //        [ 4134, 2506, 1722, 1060 ],
    //        [ 2949, 1787, 1228,  756 ],
    //        [ 2301, 1394,  958,  590 ]
    //    ],
    //    // Version 35
    //    [
    //        [ 5529, 3351, 2303, 1417 ],
    //        [ 4343, 2632, 1809, 1113 ],
    //        [ 3081, 1867, 1283,  790 ],
    //        [ 2361, 1431,  983,  605 ]
    //    ],
    //    // Version 36
    //    [
    //        [ 5836, 3537, 2431, 1496 ],
    //        [ 4588, 2780, 1911, 1176 ],
    //        [ 3244, 1966, 1351,  832 ],
    //        [ 2524, 1530, 1051,  647 ]
    //    ],
    //    // Version 37
    //    [
    //        [ 6153, 3729, 2563, 1577 ],
    //        [ 4775, 2894, 1989, 1224 ],
    //        [ 3417, 2071, 1423,  876 ],
    //        [ 3417, 2071, 1423,  876 ],
    //        [ 2625, 1591, 1093,  673 ]
    //    ],
    //    // Version 38
    //    [
    //        [ 6479, 3923, 2695, 1661 ],
    //        [ 5005, 3035, 2069, 1273 ],
    //        [ 3599, 2181, 1496,  920 ],
    //        [ 2731, 1657, 1139,  708 ]
    //    ],
    //    // Version 39
    //    [
    //        [ 6799, 4115, 2823, 1747 ],
    //        [ 5237, 3177, 2157, 1331 ],
    //        [ 3791, 2299, 1562,  963 ],
    //        [ 2867, 1739, 1190,  742 ]
    //    ],
    //    // Version 40
    //    [
    //        [ 7134, 4318, 2953, 1829 ],
    //        [ 5469, 3313, 2245, 1390 ],
    //        [ 3993, 2420, 1628, 1003 ],
    //        [ 3009, 1823, 1246,  779 ]
    //    ]
    //];

    private static readonly int[][][] ModeErrorLevelVersionCapacityLookup =
    [
        // Numeric
        [
            // L
            [41, 77, 127, 187, 255, 322, 370, 461, 552, 652, 772, 883, 1022, 1101, 1250, 1408, 1548, 1725, 1903, 2061, 2232, 2409, 2620, 2812, 3057, 3283, 3517, 3669, 3909, 4158, 4417, 4686, 4965, 5253, 5529, 5836, 6153, 6479, 6743, 7089],
            // M
            [34, 63, 101, 149, 202, 255, 293, 365, 432, 513, 604, 691, 796, 871, 991, 1082, 1212, 1346, 1500, 1600, 1708, 1872, 2059, 2188, 2395, 2544, 2701, 2857, 3035, 3289, 3486, 3693, 3909, 4134, 4343, 4588, 4775, 5039, 5313, 5596],
            // Q
            [27, 48, 77, 111, 144, 178, 207, 259, 312, 364, 427, 489, 580, 621, 703, 775, 876, 948, 1063, 1159, 1224, 1358, 1468, 1588, 1718, 1804, 1933, 2085, 2181, 2358, 2473, 2670, 2805, 2949, 3081, 3244, 3417, 3599, 3791, 3993],
            // H
            [17, 34, 58, 82, 106, 139, 154, 202, 235, 288, 331, 374, 427, 468, 530, 602, 674, 746, 813, 919, 969, 1056, 1108, 1228, 1286, 1425, 1501, 1581, 1677, 1782, 1897, 2022, 2157, 2301, 2361, 2524, 2625, 2735, 2927, 3057]
        ],
        // Alphanumeric
        [
            // L
            [25, 47, 77, 114, 154, 195, 224, 279, 335, 395, 468, 535, 619, 667, 758, 854, 938, 1046, 1153, 1249, 1352, 1460, 1588, 1704, 1853, 1990, 2132, 2223, 2369, 2520, 2677, 2840, 3009, 3183, 3351, 3537, 3729, 3927, 4087, 4296],
            // M
            [20, 38, 61, 90, 122, 154, 178, 221, 262, 311, 366, 419, 483, 528, 600, 656, 734, 816, 909, 970, 1035, 1134, 1248, 1326, 1451, 1542, 1637, 1732, 1839, 1994, 2113, 2238, 2369, 2506, 2632, 2780, 2894, 3054, 3220, 3391],
            // Q
            [16, 29, 47, 67, 87, 108, 125, 157, 189, 221, 259, 296, 352, 376, 426, 470, 531, 574, 644, 702, 742, 823, 890, 963, 1041, 1094, 1172, 1263, 1322, 1429, 1499, 1618, 1700, 1787, 1867, 1966, 2071, 2181, 2298, 2420],
            // H
            [10, 20, 35, 50, 64, 84, 93, 122, 143, 174, 200, 227, 259, 283, 321, 365, 408, 452, 493, 557, 587, 640, 672, 744, 779, 864, 910, 958, 1016, 1080, 1150, 1226, 1307, 1394, 1431, 1530, 1591, 1658, 1774, 1852]
        ],
        // Byte
        [
            // L
            [17, 32, 53, 78, 106, 134, 154, 192, 230, 271, 321, 367, 425, 458, 520, 586, 644, 718, 792, 858, 929, 1003, 1091, 1171, 1273, 1367, 1465, 1528, 1628, 1732, 1840, 1952, 2068, 2188, 2303, 2431, 2563, 2699, 2809, 2953],
            // M
            [14, 26, 42, 62, 84, 106, 122, 152, 180, 213, 251, 287, 331, 362, 412, 450, 504, 560, 624, 666, 711, 779, 857, 911, 997, 1059, 1125, 1190, 1264, 1370, 1452, 1538, 1628, 1722, 1809, 1911, 1989, 2099, 2213, 2331],
            // Q
            [11, 20, 32, 46, 60, 74, 86, 108, 130, 151, 177, 203, 241, 258, 292, 322, 364, 394, 442, 482, 509, 565, 611, 661, 715, 751, 805, 868, 908, 982, 1030, 1112, 1168, 1228, 1283, 1351, 1423, 1499, 1579, 1663],
            // H
            [7, 14, 24, 34, 44, 58, 64, 84, 98, 119, 137, 155, 177, 194, 220, 250, 280, 310, 338, 382, 403, 439, 461, 511, 535, 593, 625, 658, 698, 742, 790, 842, 898, 958, 983, 1051, 1093, 1139, 1219, 1273]
        ],
        // Kanji
        [
            // L
            [10, 20, 32, 48, 65, 82, 95, 118, 141, 167, 198, 226, 262, 282, 320, 361, 397, 442, 488, 528, 572, 618, 672, 721, 784, 842, 902, 940, 1002, 1066, 1132, 1201, 1273, 1347, 1417, 1496, 1577, 1661, 1729, 1817],
            // M
            [8, 16, 26, 38, 52, 65, 75, 93, 111, 131, 155, 177, 204, 223, 254, 277, 310, 345, 384, 410, 438, 480, 528, 561, 614, 652, 692, 732, 778, 843, 894, 947, 1002, 1060, 1113, 1176, 1224, 1292, 1362, 1435],
            // Q
            [7, 12, 20, 28, 37, 45, 53, 66, 80, 93, 109, 125, 149, 159, 180, 198, 224, 243, 272, 297, 314, 348, 376, 407, 440, 462, 496, 534, 559, 604, 634, 684, 719, 756, 790, 832, 876, 923, 972, 1024],
            // H
            [4, 8, 15, 21, 27, 36, 39, 52, 60, 74, 85, 96, 109, 120, 136, 154, 173, 191, 208, 235, 248, 270, 284, 315, 330, 365, 385, 405, 430, 457, 486, 518, 553, 590, 605, 647, 673, 701, 750, 784]
        ]
    ];

    //    //TODO: Add tests for this if commented back in
    //    public static int GetCapacity(QrVersion version, ModeIndicator mode, ErrorCorrectionLevel errorLevel)
    //    {
    //        if ((int)version is < 1 or > 40)
    //        {
    //            ThrowOutOfRangeException(1, 40, "Version");
    //        }

    //        var mappedMode = MapModeIndicator(mode);

    //#pragma warning disable IDE0046 // Convert to conditional expression
    //        if ((int)errorLevel is < 0 or > 3)
    //        {
    //            ThrowOutOfRangeException(0, 3, "Error correction level");
    //        }

    //        return VersionModeErrorLevelCapacityLookup[version - 1][(int)errorLevel - 1][mappedMode];
    //#pragma warning restore IDE0046 // Convert to conditional expression
    //    }

    public static bool TryGetVersionForCapacity(int requestedCapacityDataCharacters, ModeIndicator mode, ErrorCorrectionLevel errorLevel, out QrVersion version)
    {
        version = default;
        var mappedMode = MapModeIndicator(mode);
        if ((int)errorLevel is < 1 or > 4)
        {
            ThrowOutOfRangeException(0, 4, "Error correction level");
        }

        var relevantCapacities = ModeErrorLevelVersionCapacityLookup[mappedMode][(int)errorLevel - 1];
        var index = BinarySearcher.BinarySearchUpperBound(relevantCapacities, requestedCapacityDataCharacters);

        if (index is -1)
        {
            return false;
        }

        version = new QrVersion((byte)(index + 1));
        return true;
    }

    private static int MapModeIndicator(ModeIndicator mode)
    {
#pragma warning disable IDE0072 // Add missing cases
        return mode switch
        {
            ModeIndicator.Numeric => 0,
            ModeIndicator.Alphanumeric => 1,
            ModeIndicator.Byte => 2,
            ModeIndicator.Kanji => 3,
            _ => throw new NotSupportedException($"Mode must be one of {ModeIndicator.Numeric}, {ModeIndicator.Alphanumeric}, {ModeIndicator.Byte} or {ModeIndicator.Kanji}.")
        };
#pragma warning restore IDE0072 // Add missing cases
    }

    [DoesNotReturn]
    private static void ThrowOutOfRangeException(int min, int max, string description)
        => throw new ArgumentOutOfRangeException($"{description} must be between {min} and {max}.");
}
